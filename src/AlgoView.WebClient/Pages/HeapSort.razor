@page "/heap-sort"
@using System.Timers
@using AlgoView.WebClient.Application

<SortContainer BarData="@_barData" Maximum="@_barData.Select(b => b.Value).Max()"/>

<Button OnClick="Sort">Sort</Button>
<Button OnClick="Randomize">Randomize</Button>
<Button OnClick="Pause">Pause</Button>

@code {
    private SortContainerBarData[] _barData;
    private Timer _timer;
    private Queue<SortAction<SortContainerBarData>> _actionQueue;
    private SortAction<SortContainerBarData> _previousAction;

    protected override void OnInitialized()
    {
        _timer = new Timer();
        _timer.Interval = 50;
        _timer.Elapsed += (_, _) =>
        {
            if (_previousAction is not null)
            {
                _previousAction.UndoHighlight();
            }

            if (_actionQueue.TryDequeue(out var action))
            {
                action.Execute();
                _previousAction = action;
                StateHasChanged();
            }
        };

        Randomize();
    }

    private void Sort()
    {
        _actionQueue = new Queue<SortAction<SortContainerBarData>>();

        var sorter = new AlgoView.Algorithms.HeapSort(_barData.Select(b => b.Value).ToArray());
        sorter.Progress += (_, args) =>
        {
            _actionQueue.Enqueue(new HeapSortProgressAction(_barData, args));
        };

        sorter.Swapped += (_, args) =>
        {
            _actionQueue.Enqueue(new HeapSortSwappedAction(_barData, args));
        };

        // sorter.BeforeHeapify += (_, args) =>
        // {
        //     _actionQueue.Enqueue(new HeapSortBeforeHeapifyAction(_barData, args));
        // };

        sorter.Sort();
        _timer.Start();
    }

    private void Pause()
    {
        if (_timer.Enabled)
        {
            _timer.Stop();
        }
        else
        {
            _timer.Start();
        }
    }

    private void Randomize()
    {
        var data = GenerateRandomBarData();

        _barData = data.ToArray();
    }

    private IEnumerable<SortContainerBarData> GenerateRandomBarData()
    {
        var rng = new Random();

        for (var i = 0; i < 50; i++)
        {
            yield return new SortContainerBarData
            {
                Value = rng.Next(i, 101),
            };
        }
    }

}